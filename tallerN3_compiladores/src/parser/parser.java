
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20140808 (SVN rev 54)
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.FileReader;
import java.util.ArrayList;
import scanner.*;
import ast.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20140808 (SVN rev 54) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\103\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\006\005\000\002\006\010\000\002\005\003\000" +
    "\002\005\003\000\002\013\010\000\002\010\003\000\002" +
    "\010\003\000\002\007\005\000\002\007\003\000\002\011" +
    "\004\000\002\011\006\000\002\014\006\000\002\015\004" +
    "\000\002\015\003\000\002\016\004\000\002\016\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\024\004\000\002\024" +
    "\003\000\002\031\011\000\002\031\007\000\002\032\003" +
    "\000\002\032\003\000\002\033\007\000\002\034\010\000" +
    "\002\035\004\000\002\035\005\000\002\023\005\000\002" +
    "\023\003\000\002\022\003\000\002\022\006\000\002\030" +
    "\005\000\002\030\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\027\005\000\002\027\003\000\002" +
    "\020\003\000\002\020\003\000\002\026\005\000\002\026" +
    "\003\000\002\021\003\000\002\021\003\000\002\025\005" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\036\006\000\002\037\003\000\002\037\003\000\002" +
    "\040\005\000\002\040\003\000\002\041\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\161\000\006\005\013\010\010\001\002\000\004\002" +
    "\163\001\002\000\010\002\ufffc\005\ufffc\010\ufffc\001\002" +
    "\000\010\002\ufffd\005\ufffd\010\ufffd\001\002\000\010\002" +
    "\000\005\013\010\010\001\002\000\004\037\ufff8\001\002" +
    "\000\004\037\014\001\002\000\010\002\ufffe\005\ufffe\010" +
    "\ufffe\001\002\000\004\037\ufff9\001\002\000\010\026\017" +
    "\030\015\032\016\001\002\000\006\005\013\010\024\001" +
    "\002\000\004\036\020\001\002\000\034\002\ufffb\004\ufffb" +
    "\005\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\026\ufffb\030" +
    "\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb\001\002\000\004" +
    "\033\021\001\002\000\004\026\022\001\002\000\034\002" +
    "\ufffa\004\ufffa\005\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa" +
    "\026\ufffa\030\ufffa\034\ufffa\035\ufffa\036\ufffa\037\ufffa\001" +
    "\002\000\006\027\160\031\ufff6\001\002\000\006\031\ufff5" +
    "\037\ufff8\001\002\000\004\037\155\001\002\000\004\031" +
    "\030\001\002\000\006\027\ufff3\031\ufff3\001\002\000\004" +
    "\034\032\001\002\000\010\002\ufff7\005\ufff7\010\ufff7\001" +
    "\002\000\032\004\uffbf\005\uffbf\007\uffbf\010\uffbf\011\uffbf" +
    "\012\uffbf\026\uffbf\030\uffbf\034\uffbf\035\uffbf\036\uffbf\037" +
    "\uffbf\001\002\000\032\004\uffbf\005\013\007\uffbf\010\010" +
    "\011\uffbf\012\uffbf\026\uffbf\030\uffbf\034\uffbf\035\uffbf\036" +
    "\uffbf\037\uffbf\001\002\000\032\004\uffee\005\uffee\007\uffee" +
    "\010\uffee\011\uffee\012\uffee\026\uffee\030\uffee\034\uffee\035" +
    "\uffee\036\uffee\037\uffee\001\002\000\026\004\050\007\046" +
    "\011\044\012\053\026\067\030\064\034\032\035\066\036" +
    "\052\037\051\001\002\000\032\004\uffef\005\uffef\007\uffef" +
    "\010\uffef\011\uffef\012\uffef\026\uffef\030\uffef\034\uffef\035" +
    "\uffef\036\uffef\037\uffef\001\002\000\026\004\uffec\007\uffec" +
    "\011\uffec\012\uffec\026\uffec\030\uffec\034\uffec\035\uffec\036" +
    "\uffec\037\uffec\001\002\000\004\037\041\001\002\000\006" +
    "\026\017\032\016\001\002\000\030\004\uffe2\006\uffe2\007" +
    "\uffe2\011\uffe2\012\uffe2\026\uffe2\030\uffe2\034\uffe2\035\uffe2" +
    "\036\uffe2\037\uffe2\001\002\000\026\004\uffed\007\uffed\011" +
    "\uffed\012\uffed\026\uffed\030\uffed\034\uffed\035\uffed\036\uffed" +
    "\037\uffed\001\002\000\004\030\151\001\002\000\030\004" +
    "\uffe1\006\uffe1\007\uffe1\011\uffe1\012\uffe1\026\uffe1\030\uffe1" +
    "\034\uffe1\035\uffe1\036\uffe1\037\uffe1\001\002\000\012\026" +
    "\147\030\064\036\052\037\051\001\002\000\030\004\uffea" +
    "\006\uffea\007\uffea\011\uffea\012\uffea\026\uffea\030\uffea\034" +
    "\uffea\035\uffea\036\uffea\037\uffea\001\002\000\004\030\140" +
    "\001\002\000\044\013\uffda\014\uffda\015\uffda\016\uffda\017" +
    "\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda" +
    "\026\uffda\027\uffda\030\125\031\uffda\032\126\033\uffda\001" +
    "\002\000\036\014\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5" +
    "\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027" +
    "\uffc5\031\uffc5\033\uffc5\001\002\000\024\004\050\007\046" +
    "\011\044\012\053\026\067\030\064\034\032\036\052\037" +
    "\051\001\002\000\004\026\117\001\002\000\030\004\uffe7" +
    "\006\uffe7\007\uffe7\011\uffe7\012\uffe7\026\uffe7\030\uffe7\034" +
    "\uffe7\035\uffe7\036\uffe7\037\uffe7\001\002\000\036\014\uffcb" +
    "\015\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023" +
    "\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\031\uffcb\033\uffcb" +
    "\001\002\000\032\014\104\016\114\020\103\021\105\022" +
    "\107\023\106\024\110\025\113\026\uffd7\027\uffd7\031\uffd7" +
    "\033\uffd7\001\002\000\036\014\uffcf\015\076\016\uffcf\017" +
    "\100\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf" +
    "\026\uffcf\027\uffcf\031\uffcf\033\uffcf\001\002\000\012\026" +
    "\uffdb\027\uffdb\031\uffdb\033\uffdb\001\002\000\030\004\uffeb" +
    "\006\uffeb\007\uffeb\011\uffeb\012\uffeb\026\uffeb\030\uffeb\034" +
    "\uffeb\035\uffeb\036\uffeb\037\uffeb\001\002\000\030\004\uffe9" +
    "\006\uffe9\007\uffe9\011\uffe9\012\uffe9\026\uffe9\030\uffe9\034" +
    "\uffe9\035\uffe9\036\uffe9\037\uffe9\001\002\000\010\030\064" +
    "\036\052\037\051\001\002\000\030\004\uffe8\006\uffe8\007" +
    "\uffe8\011\uffe8\012\uffe8\026\uffe8\030\uffe8\034\uffe8\035\uffe8" +
    "\036\uffe8\037\uffe8\001\002\000\036\002\ufff0\004\ufff0\005" +
    "\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0\026\ufff0" +
    "\030\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0\001\002\000" +
    "\030\004\uffe5\006\uffe5\007\uffe5\011\uffe5\012\uffe5\026\uffe5" +
    "\030\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\001\002\000" +
    "\036\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6" +
    "\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\031" +
    "\uffc6\033\uffc6\001\002\000\040\013\072\014\uffc7\015\uffc7" +
    "\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024" +
    "\uffc7\025\uffc7\026\uffc7\027\uffc7\031\uffc7\033\uffc7\001\002" +
    "\000\010\030\064\036\052\037\051\001\002\000\012\026" +
    "\uffdc\027\uffdc\031\uffdc\033\uffdc\001\002\000\004\031\075" +
    "\001\002\000\036\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020" +
    "\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8" +
    "\027\uffc8\031\uffc8\033\uffc8\001\002\000\010\030\uffca\036" +
    "\uffca\037\uffca\001\002\000\010\030\064\036\052\037\051" +
    "\001\002\000\010\030\uffc9\036\uffc9\037\uffc9\001\002\000" +
    "\036\014\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7" +
    "\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\031" +
    "\uffc7\033\uffc7\001\002\000\036\014\uffcc\015\uffcc\016\uffcc" +
    "\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025" +
    "\uffcc\026\uffcc\027\uffcc\031\uffcc\033\uffcc\001\002\000\010" +
    "\030\uffd5\036\uffd5\037\uffd5\001\002\000\010\030\uffce\036" +
    "\uffce\037\uffce\001\002\000\010\030\uffd6\036\uffd6\037\uffd6" +
    "\001\002\000\010\030\uffd3\036\uffd3\037\uffd3\001\002\000" +
    "\010\030\uffd4\036\uffd4\037\uffd4\001\002\000\010\030\uffd2" +
    "\036\uffd2\037\uffd2\001\002\000\010\030\064\036\052\037" +
    "\051\001\002\000\010\030\064\036\052\037\051\001\002" +
    "\000\010\030\uffd1\036\uffd1\037\uffd1\001\002\000\010\030" +
    "\uffcd\036\uffcd\037\uffcd\001\002\000\036\014\uffd0\015\076" +
    "\016\uffd0\017\100\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024" +
    "\uffd0\025\uffd0\026\uffd0\027\uffd0\031\uffd0\033\uffd0\001\002" +
    "\000\016\014\104\016\114\026\uffd8\027\uffd8\031\uffd8\033" +
    "\uffd8\001\002\000\030\004\uffe6\006\uffe6\007\uffe6\011\uffe6" +
    "\012\uffe6\026\uffe6\030\uffe6\034\uffe6\035\uffe6\036\uffe6\037" +
    "\uffe6\001\002\000\004\011\121\001\002\000\004\030\122" +
    "\001\002\000\010\030\064\036\052\037\051\001\002\000" +
    "\004\031\124\001\002\000\030\004\uffdf\006\uffdf\007\uffdf" +
    "\011\uffdf\012\uffdf\026\uffdf\030\uffdf\034\uffdf\035\uffdf\036" +
    "\uffdf\037\uffdf\001\002\000\012\030\064\031\uffbf\036\052" +
    "\037\051\001\002\000\010\030\064\036\052\037\051\001" +
    "\002\000\004\033\130\001\002\000\040\013\uffd9\014\uffd9" +
    "\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023" +
    "\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\031\uffd9\033\uffd9" +
    "\001\002\000\006\027\136\031\uffc3\001\002\000\004\031" +
    "\uffc2\001\002\000\004\031\135\001\002\000\006\027\uffc0" +
    "\031\uffc0\001\002\000\036\014\uffc4\015\uffc4\016\uffc4\017" +
    "\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4" +
    "\026\uffc4\027\uffc4\031\uffc4\033\uffc4\001\002\000\010\030" +
    "\064\036\052\037\051\001\002\000\006\027\uffc1\031\uffc1" +
    "\001\002\000\010\030\064\036\052\037\051\001\002\000" +
    "\004\031\142\001\002\000\024\004\050\007\046\011\044" +
    "\012\053\026\067\030\064\034\032\036\052\037\051\001" +
    "\002\000\030\004\uffe3\006\144\007\uffe3\011\uffe3\012\uffe3" +
    "\026\uffe3\030\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\001" +
    "\002\000\024\004\050\007\046\011\044\012\053\026\067" +
    "\030\064\034\032\036\052\037\051\001\002\000\030\004" +
    "\uffe4\006\uffe4\007\uffe4\011\uffe4\012\uffe4\026\uffe4\030\uffe4" +
    "\034\uffe4\035\uffe4\036\uffe4\037\uffe4\001\002\000\004\026" +
    "\150\001\002\000\030\004\uffde\006\uffde\007\uffde\011\uffde" +
    "\012\uffde\026\uffde\030\uffde\034\uffde\035\uffde\036\uffde\037" +
    "\uffde\001\002\000\030\004\uffdd\006\uffdd\007\uffdd\011\uffdd" +
    "\012\uffdd\026\uffdd\030\uffdd\034\uffdd\035\uffdd\036\uffdd\037" +
    "\uffdd\001\002\000\010\030\064\036\052\037\051\001\002" +
    "\000\004\031\153\001\002\000\024\004\050\007\046\011" +
    "\044\012\053\026\067\030\064\034\032\036\052\037\051" +
    "\001\002\000\030\004\uffe0\006\uffe0\007\uffe0\011\uffe0\012" +
    "\uffe0\026\uffe0\030\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0" +
    "\001\002\000\010\027\ufff2\031\ufff2\032\156\001\002\000" +
    "\004\033\157\001\002\000\006\027\ufff1\031\ufff1\001\002" +
    "\000\006\005\013\010\010\001\002\000\006\027\ufff4\031" +
    "\ufff4\001\002\000\010\002\uffff\005\uffff\010\uffff\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\161\000\016\002\003\003\006\004\011\005\010\006" +
    "\005\013\004\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\004\161\005\010\006\005\013" +
    "\004\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\005" +
    "\024\007\022\010\025\011\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\030\001\001\000\002\001\001\000\006\015\032\041\033" +
    "\001\001\000\012\005\037\006\035\016\034\041\036\001" +
    "\001\000\002\001\001\000\040\012\042\014\046\022\070" +
    "\023\053\024\061\025\055\026\057\027\056\030\060\031" +
    "\062\032\064\033\041\034\044\035\054\036\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\022\070\023\145\025" +
    "\055\026\057\027\056\030\060\036\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\012\117\014\046\022\070\023\053\024\061" +
    "\025\055\026\057\027\056\030\060\031\062\032\064\033" +
    "\041\034\044\035\054\036\067\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\017\110\020" +
    "\111\001\001\000\004\021\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\022\070\023" +
    "\073\025\055\026\057\027\056\030\060\036\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\022\070\023\072" +
    "\025\055\026\057\027\056\030\060\036\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\022\100\025\101\036\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\022\100" +
    "\025\055\026\057\027\115\036\067\001\001\000\012\022" +
    "\100\025\055\026\114\036\067\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\076\001\001\000\004\020" +
    "\111\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\022\070\023\122\025\055\026\057\027" +
    "\056\030\060\036\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\022\070\023\133\025\055\026\057\027" +
    "\056\030\060\036\067\037\132\040\130\041\131\001\001" +
    "\000\020\022\070\023\126\025\055\026\057\027\056\030" +
    "\060\036\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\022\070\023\136" +
    "\025\055\026\057\027\056\030\060\036\067\001\001\000" +
    "\002\001\001\000\020\022\070\023\140\025\055\026\057" +
    "\027\056\030\060\036\067\001\001\000\002\001\001\000" +
    "\040\012\142\014\046\022\070\023\053\024\061\025\055" +
    "\026\057\027\056\030\060\031\062\032\064\033\041\034" +
    "\044\035\054\036\067\001\001\000\002\001\001\000\040" +
    "\012\144\014\046\022\070\023\053\024\061\025\055\026" +
    "\057\027\056\030\060\031\062\032\064\033\041\034\044" +
    "\035\054\036\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\022\070" +
    "\023\151\025\055\026\057\027\056\030\060\036\067\001" +
    "\001\000\002\001\001\000\040\012\153\014\046\022\070" +
    "\023\053\024\061\025\055\026\057\027\056\030\060\031" +
    "\062\032\064\033\041\034\044\035\054\036\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\024\011\160\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public String cadenaGramatica = ""; /* ******************************variable de prueba, es para entender esto..... *********************************** */

  public AstNodo root;
  int globalInt=0;//contador de ints
  int globalVoid=0;//contador de void.
  int globalCompound=0;//contador de conpound.
    
  int fila;
  int columna;

  /* Reporte de error encontrado. */
    //public void report_error(String message, Object info) {
    //    StringBuilder m = new StringBuilder("Error");
    //    if (info instanceof java_cup.runtime.Symbol) {
    //        java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
    //        if (s.left >= 0) {                
    //            m.append(" en linea "+(s.left+1));
    //            if (s.right >= 0)
    //                m.append(", columna "+(s.right+1));
    //        }
    //    }
    //    m.append(" : "+message);
    //    System.err.println(m);
    //}
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    public void syntax_error(Symbol s){
        report_error("Error sintactico en Linea: " + (s.left + 1) + " Columna: "+ (s.right + 1) + ". Texto: \"" +
        s.value + "\"\n", s);
    }

    public int getFila(){
      return fila;
    }
    public int getColumna(){
      return columna;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AstNodo start_val = (AstNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= declaration_list 
            {
              AstNodo RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AstNodo dl = (AstNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              //System.out.println("fin prog: "+dl.getDeclaraciones().size());
              //Nodo prog = new Nodo("program",dl);
              //System.out.println("cant declaraciones en ejercicio: "+prog.getDeclarations().get(0).getDeclarations().size());
              RESULT=dl;
              root=dl;//envio el nodo del programa a la raiz.
            
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaration_list ::= declaration_list declaration 
            {
              AstNodo RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AstNodo list = (AstNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AstNodo d = (AstNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                      //System.out.println("declaration list 1");
                          /*   
                          if(d != null) {
                            list.getDeclarations().add(d); //se agrega como hijo.
                          } else {
                            list = new Nodo(); //nodo a crear
                          }
                          RESULT = null;//este sirve para dar termino a los enlaces de una rama para seguir con otra o terminar.
                          */
                          if(d != null) {
                            ((AstProgram)list).getDeclaraciones().add(d); //se agrega como hijo.
                          //System.out.println(list.getDeclarations().size());
                          } else {
                            //por logica , no deberia entrar aqui.
                            list = new AstProgram(); //nodo a crear
                          }
                          RESULT=list;//nesesario para completar el arbol con el nodo raiz.
                          //RESULT = null;//este sirve para dar termino a los enlaces de una rama para seguir con otra o terminar.
                          

                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaration_list ::= declaration 
            {
              AstNodo RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AstNodo d = (AstNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                      //System.out.println("decla list 2");
                        AstProgram list = new AstProgram();
                        list.getDeclaraciones().add(d);
                        RESULT = list;
                        
                        
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaration ::= var_declaration 
            {
              AstNodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AstNodo v = (AstNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    
                    RESULT=v;
                  //System.out.println("declaration 1");
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration ::= fun_declaration 
            {
              AstNodo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AstNodo f = (AstNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT=f;
                    //RESULT=new Nodo("declaration",f);
                  //System.out.println("declaration 2");
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // var_declaration ::= type_specifier ID PUNTOCOMA 
            {
              AstNodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        if(t.equalsIgnoreCase("int")){
                          AstVarDec nodo = new AstVarDec("INT",id,globalInt);
                          fila=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left+1;
                          columna=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right+1;
                          nodo.setFila(fila);
                          nodo.setColumna(columna);
                          //System.out.println("variable dec: "+fila+", "+columna);
                          RESULT=nodo;
                        
                        }else{
                          AstVarDec nodo = new AstVarDec("VOID",id,globalVoid);    
                          fila=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left+1;
                          columna=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right+1;
                          nodo.setFila(fila);
                          nodo.setColumna(columna);
                          //System.out.println("variable dec: "+fila+", "+columna);
                          RESULT=nodo;
                        
                        }
                        
                        //System.out.println("var declaration 1");
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // var_declaration ::= type_specifier ID BRACKETLEFT NUM BRACKETRIGHT PUNTOCOMA 
            {
              AstNodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        if(t.equalsIgnoreCase("int")){
                          AstVarDec nodo=new AstVarDec("INT",id,globalInt,Integer.parseInt(n));
                          fila=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left+1;
                          columna=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right+1;
                          nodo.setFila(fila);
                          nodo.setColumna(columna);
                          //System.out.println("variable dec: "+fila+", "+columna);
                          RESULT=nodo;
                        
                        }else{
                          AstVarDec nodo=new AstVarDec("VOID",id,globalVoid,Integer.parseInt(n));
                          fila=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left+1;
                          columna=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right+1;
                          nodo.setFila(fila);
                          nodo.setColumna(columna);
                          //System.out.println("variable dec: "+fila+", "+columna);
                          RESULT=nodo;
                        
                        }
                        //RESULT=new Nodo("var_declaration2",t.toString(),id,n);
                      //System.out.println("var declaration 2");
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type_specifier ::= INT 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    globalInt++;
                    RESULT=i;
                  //System.out.println("type INT");
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_specifier",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type_specifier ::= VOID 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                      globalVoid++;
                      RESULT=v;
                    //System.out.println("type VOID");
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_specifier",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // fun_declaration ::= type_specifier ID PARENTHLEFT params PARENTHRIGHT compound_stmt 
            {
              AstNodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AstNodo com = (AstNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                        if(p instanceof Param){
                          //quiere decir que hay parametro VOID
                          AstFunction newNodo = new AstFunction(id, t);
                          newNodo.getParametros().add((Param)p);
                          if(com != null){
                            newNodo.setContenido(com);
                          }
                          RESULT=newNodo;
                        }else{
                          //quiere decir que existen parametros (llegara como objeto).
                          ((AstFunction) p).setID(id);
                          ((AstFunction) p).setTipoIDFuncion(t);
                          if(com != null){
                            ((AstFunction) p).setContenido(com);
                          }
                          RESULT=(AstNodo) p;
                        }


                        //((AstFunction) p).setID(id);
                        //((AstFunction) p).setTipoIDFuncion(t);
                        //if(com!=null){
                        //  ((AstFunction) p).getParametros().add(com);    
                        //}
                        //RESULT=(AstNodo) p;
                      //System.out.println("fun_declaration");
                        
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_declaration",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // params ::= param_list 
            {
              Object RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AstNodo pl = (AstNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT=pl; //subiria como una nodoFunction.
            //System.out.println("params 1");
              //Nodo node = new Nodo("params",pl);
            //System.out.println("cant parametros en funcion: "+node.getDeclarations().get(0).getDeclarations().size());
              //RESULT=node;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // params ::= VOID 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              Param nodo =new Param("VOID",true);
              fila=((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left+1;
              columna=((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right+1;
              nodo.setFila(fila);
              nodo.setColumna(columna);
              RESULT=nodo;
              //RESULT=new AstFunction(true);
            //System.out.println("params 2");
              //se debe crear un nodo que una a la funcion.
              //Nodo voi=new Nodo("VOID");
              //RESULT=voi;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // param_list ::= param_list COMA param 
            {
              AstNodo RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AstNodo list = (AstNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AstNodo p = (AstNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                //System.out.println("param_list 1");
                  if(p != null) {
                    ((AstFunction) list).getParametros().add(p); //se agrega como hijo el parametro.
                    //System.out.println(((AstFunction) list).getParametros().size());
                  } else {
                    //por logica , no deberia entrar aqui.
                    System.out.println("no deberia entrar aqui");
                    list = new AstFunction(); //nodo a crear
                    }
                    RESULT=list;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // param_list ::= param 
            {
              AstNodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AstNodo p = (AstNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                //System.out.println("param_list 2");
                  AstFunction list= new AstFunction();
                  fila=((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left+1;
                  columna=((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right+1;
                  list.setFila(fila);
                  list.setColumna(columna);
                  list.getParametros().add(p);
                  RESULT=list;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // param ::= type_specifier ID 
            {
              AstNodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              Param nodo=new Param(id,t,false);
              fila=((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left+1;
              columna=((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right+1;
              nodo.setFila(fila);
              nodo.setColumna(columna);
              RESULT=nodo;
              //System.out.println("Param 1");
              //RESULT=new Nodo("param",t.toString(),id);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // param ::= type_specifier ID BRACKETLEFT BRACKETRIGHT 
            {
              AstNodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
              Param nodo=new Param(id,t,true); 
              fila=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left+1;
              columna=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right+1;
              nodo.setFila(fila);
              nodo.setColumna(columna);
              RESULT=nodo;
              
            //System.out.println("Param 2");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // compound_stmt ::= BRACERLEFT local_declarations statement_list BRACERRIGHT 
            {
              AstNodo RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<AstNodo> ld = (ArrayList<AstNodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<AstNodo> sl = (ArrayList<AstNodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

                      if(ld.size()==0 && sl.size()==0){
                        //no hay declaraciones ni expresiones de ningun tipo.
                        RESULT=null;
                      }else{

                        RESULT=new Compound(ld, sl); 
                      }
                      //if(ld.size()==0){
                      //  RESULT=null;
                      //}else{
                      //  RESULT=new Compound(ld,sl,globalCompound+1);
                      //  globalCompound++;
                      //}
                       //RESULT=new Compound(ld,sl);   
                      //System.out.println("compound_stmt");
                      //RESULT=new Nodo("compound_stmt",ld,sl);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // local_declarations ::= local_declarations var_declaration 
            {
              ArrayList<AstNodo> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<AstNodo> list = (ArrayList<AstNodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AstNodo l = (AstNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                          //System.out.println("local_declarations 1");
                          if(l != null) {
                            list.add(l); //se agrega como hijo.
                            //System.out.println(list.getDeclarations().size());
                          } else {
                            //no deberia entrar...
                            list = new ArrayList<AstNodo>();
                          }
                          RESULT=list;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_declarations",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // local_declarations ::= empty 
            {
              ArrayList<AstNodo> RESULT =null;
		
                          
                          ArrayList<AstNodo> list= new ArrayList<AstNodo>();
                          RESULT=list;
                          //System.out.println("empty");
                          //Nodo vacio=new Nodo("empty");
                          //RESULT= vacio;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_declarations",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement_list ::= statement_list statement 
            {
              ArrayList<AstNodo> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<AstNodo> list = (ArrayList<AstNodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AstNodo s = (AstNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                      //System.out.println("19");
                      if(s != null) {
                          list.add(s); //se agrega como hijo.
                          //System.out.println(list.getDeclarations().size());
                          } else {
                          //no deberia entrar...
                          list = new ArrayList<AstNodo>();
                          }
                          RESULT=list;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement_list ::= empty 
            {
              ArrayList<AstNodo> RESULT =null;
		
                      //System.out.println("vacio");
                      ArrayList<AstNodo> list= new ArrayList<AstNodo>();
                      RESULT=list;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= expression_stmt 
            {
              AstNodo RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AstNodo ex = (AstNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  RESULT=ex;
                  //System.out.println("20");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= compound_stmt 
            {
              AstNodo RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AstNodo cs = (AstNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  RESULT=cs;
                  //System.out.println("21");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= selection_stmt 
            {
              AstNodo RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AstNodo ss = (AstNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  RESULT=ss;
                  //System.out.println("22");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= iteration_stmt 
            {
              AstNodo RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AstNodo is = (AstNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  RESULT=is;
                  //System.out.println("23");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= return_stmt 
            {
              AstNodo RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AstNodo rs = (AstNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  RESULT=rs;
                  //System.out.println("24");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expression_stmt ::= expression PUNTOCOMA 
            {
              AstNodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AstNodo e = (AstNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        //System.out.println("25");
                        RESULT=e;
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_stmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expression_stmt ::= PUNTOCOMA 
            {
              AstNodo RESULT =null;
		
                        //System.out.println("26");
                        
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_stmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // selection_stmt ::= IF PARENTHLEFT expression PARENTHRIGHT statement ELSE statement 
            {
              AstNodo RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		AstNodo ex = (AstNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int staleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int staright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AstNodo sta = (AstNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sta2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sta2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AstNodo sta2 = (AstNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                      //System.out.println("27");
                      RESULT= new Statement("IF",ex, sta, sta2);

                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selection_stmt",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // selection_stmt ::= IF PARENTHLEFT expression PARENTHRIGHT statement 
            {
              AstNodo RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AstNodo ex = (AstNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int staleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int staright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AstNodo sta = (AstNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                      //System.out.println("28");
                      RESULT=new Statement("IF", ex, sta);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selection_stmt",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // iteration_stmt ::= while_stmt 
            {
              AstNodo RESULT =null;
		int wsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AstNodo ws = (AstNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                      //System.out.println("29");
                      RESULT=ws;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteration_stmt",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // iteration_stmt ::= do_while_stmt 
            {
              AstNodo RESULT =null;
		int dwsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dwsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AstNodo dws = (AstNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                      //System.out.println("30");
                      RESULT=dws;

                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteration_stmt",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // while_stmt ::= WHILE PARENTHLEFT expression PARENTHRIGHT statement 
            {
              AstNodo RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AstNodo ex = (AstNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int staleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int staright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AstNodo sta = (AstNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  //System.out.println("31");
                  RESULT=new Statement("WHILE", ex, sta);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // do_while_stmt ::= DO statement WHILE PARENTHLEFT expression PARENTHRIGHT 
            {
              AstNodo RESULT =null;
		int staleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int staright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		AstNodo sta = (AstNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AstNodo ex = (AstNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                      //System.out.println("32");
                      RESULT=new Statement("DO", ex, sta);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("do_while_stmt",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // return_stmt ::= RETURN PUNTOCOMA 
            {
              AstNodo RESULT =null;
		
                    //System.out.println("33");
                    Statement nodo =new Statement("RETURN");
                    nodo.setTipoFuncion("VOID");
                    RESULT=nodo;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // return_stmt ::= RETURN expression PUNTOCOMA 
            {
              AstNodo RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AstNodo ex = (AstNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    //System.out.println("34");
                    Statement nodo =new Statement("RETURN", ex);
                    nodo.setTipoFuncion("INT");
                    RESULT=nodo;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= var IGUAL expression 
            {
              AstNodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AstNodo v = (AstNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AstNodo ex = (AstNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  //System.out.println("35");
                  Expression nodo = new Expression(v, i, ex);
                  fila=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left+1;
                  columna=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right+1;
                  nodo.setFila(fila);
                  nodo.setColumna(columna);
                  RESULT=nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= simple_expression 
            {
              AstNodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AstNodo s = (AstNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  RESULT=s;
                  //System.out.println("36");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // var ::= ID 
            {
              AstNodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Var nodo=new Var(id, true);
            fila=((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left+1;
            columna=((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right+1;
            nodo.setFila(fila);
            nodo.setColumna(columna);
            RESULT=nodo;
            //System.out.println("37");
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // var ::= ID BRACKETLEFT expression BRACKETRIGHT 
            {
              AstNodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AstNodo ex = (AstNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            Var nodo=new Var(id, ex);
            fila=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left+1;
            columna=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right+1;
            nodo.setFila(fila);
            nodo.setColumna(columna);
            RESULT=nodo;
            //System.out.println("38");
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // simple_expression ::= additive_expression relop additive_expression 
            {
              AstNodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AstNodo a = (AstNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AstNodo ae = (AstNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                          //System.out.println("39");
                          Expression nodo=new Expression(a, r, ae);
                          fila=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left+1;
                          columna=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right+1;
                          nodo.setFila(fila);
                          nodo.setColumna(columna);
                          RESULT=nodo;

                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // simple_expression ::= additive_expression 
            {
              AstNodo RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AstNodo ae = (AstNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                          //System.out.println("40");
                          RESULT=ae;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // relop ::= MENIGUAL 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT=m;
             //System.out.println("41");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // relop ::= MENOR 
            {
              String RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int meright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String me = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT=me;
              //System.out.println("42");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // relop ::= MAYOR 
            {
              String RESULT =null;
		int maleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int maright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ma = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT=ma;
              //System.out.println("43");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // relop ::= MAYIGUAL 
            {
              String RESULT =null;
		int mayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mayright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String may = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT=may;
              //System.out.println("44");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // relop ::= IGUALIGUAL 
            {
              String RESULT =null;
		int igleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int igright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ig = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT=ig;
              //System.out.println("45");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // relop ::= DISTINTO 
            {
              String RESULT =null;
		int dileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int diright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String di = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT=di;
              //System.out.println("46");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // additive_expression ::= additive_expression addop term 
            {
              AstNodo RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AstNodo ae = (AstNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int adleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int adright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ad = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AstNodo t = (AstNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            //System.out.println("47");
                            Expression nodo=new Expression(ae, ad, t);
                            fila=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left+1;
                            columna=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right+1;
                            nodo.setFila(fila);
                            nodo.setColumna(columna);
                            RESULT=nodo;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expression",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // additive_expression ::= term 
            {
              AstNodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AstNodo t = (AstNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT=t;
                            //System.out.println("48");
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expression",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // addop ::= SUMA 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT=s;
              //System.out.println("49");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("addop",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // addop ::= RESTA 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT=r;
              //System.out.println("50");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("addop",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // term ::= term mulop factor 
            {
              AstNodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AstNodo t = (AstNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            if(f instanceof String){
              Expression nodo=new Expression(t, m, f.toString());//f es numero.
              fila=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left+1;
              columna=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right+1;
              nodo.setFila(fila);
              nodo.setColumna(columna);
              RESULT=nodo;
            }else{
              Expression nodo = new Expression(t, m, (AstNodo)f);
              fila=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left+1;
              columna=((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right+1;
              nodo.setFila(fila);
              nodo.setColumna(columna);
              RESULT=nodo;
            }
            //System.out.println("51");
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // term ::= factor 
            {
              AstNodo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            if(f instanceof String){
              //corresponde a un numero.
              RESULT= new Var((String)f, false); //se utiliaza el nodo var para ahorrar en hacer una clase factor.

            }else{
              //corresponde a un nodo.
              RESULT=(AstNodo)f;
            }
            
            //System.out.println("52");
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // mulop ::= MULT 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT=m;
//            //System.out.println("53");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mulop",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // mulop ::= DIV 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT=d;
  //          //System.out.println("54");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mulop",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // factor ::= PARENTHLEFT expression PARENTHRIGHT 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AstNodo ex = (AstNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
              RESULT=ex;
    //        //System.out.println("55");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // factor ::= var 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AstNodo v = (AstNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT=v;
      //      //System.out.println("56");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // factor ::= call 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AstNodo c = (AstNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        //    //System.out.println("57");
              RESULT=c;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // factor ::= NUM 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT=n;
              //System.out.println("58");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // call ::= ID PARENTHLEFT args PARENTHRIGHT 
            {
              AstNodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AstNodo args = (AstNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            //System.out.println("59");
              //guardo la fila y columna, para posibles errores.
              fila=((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left+1;
              columna=((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right+1;
              ((Call)args).setFila(fila);
              ((Call)args).setColumna(columna);
              ((Call)args).setID(id);
              RESULT=args;
            
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // args ::= arg_list 
            {
              AstNodo RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AstNodo al = (AstNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT=al;
            //System.out.println("60");
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // args ::= empty 
            {
              AstNodo RESULT =null;
		
            //System.out.println("61");
            RESULT=new Call();
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // arg_list ::= arg_list COMA expression 
            {
              AstNodo RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AstNodo list = (AstNodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AstNodo ex = (AstNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                //System.out.println("62");
                if(ex != null) {
                  ((Call)list).getArgs().add(ex); //se agrega como hijo.
                  //System.out.println(list.getDeclarations().size());
                } else {
                  //por logica , no deberia entrar aqui.
                  list = new Call(); //nodo a crear
                }
                RESULT=list;

              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_list",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // arg_list ::= expression 
            {
              AstNodo RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AstNodo ex = (AstNodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                //System.out.println("63");
                Call list = new Call();
                list.getArgs().add(ex);//que puede ser, Call.
                RESULT = list;

              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_list",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // empty ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("empty",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
